@page "/Customer/OrderHistory"
@model FE.Pages.Customer.IndexModel
@{
    ViewData["Title"] = "Customer Information";
}

<style>
    .sidebar {
        background-color: #f8f9fa;
        padding: 20px;
        border-radius: 10px;
        height: fit-content;
    }

    .main-content {
        padding: 20px;
        height: fit-content;
    }

    .sidebar a {
        text-decoration: none;
        display: block;
        padding: 10px 15px;
        color: #333;
    }

        .sidebar a:hover {
            background-color: #ddd;
        }
</style>

<div class="container-fluid">
    <div class="row">
        <!-- Sidebar -->
        <div class="col-lg-2 col-md-3 sidebar bg-light pt-4">
            <div class="text-center mb-4">
                @{
                                                            @using Helpers
                                                            @using Models
                    var account = SessionHelper.GetObjectFromJson<User>(HttpContext.Session, "user");
                }
                @if (account != null)
                {
                    <h5>@account.UserName</h5>
                }
                else
                {
                    <script>
                        window.location.href = '/Login';
                    </script>
                }
            </div>
            <div class="list-group list-group-flush">
                <a asp-page="/Customer/UserInformation" asp-route-userId="@account?.Id" class="list-group-item list-group-item-action rounded">User Information</a>
                <a asp-page="/Customer/OrderHistory" asp-route-userId="@account?.Id" class="list-group-item list-group-item-action rounded">My Orders</a>
                <a asp-page="/Customer/UserAddress" class="list-group-item list-group-item-action rounded">My Address</a>
                <a href="#" class="list-group-item list-group-item-action rounded">My Coupon</a>
            </div>
        </div>
        <!-- Main Content -->
        <div class="col-lg-10 col-md-9 main-content pt-4">
            <ul class="nav nav-tabs mb-4">
                <li class="nav-item">
                    <a class="nav-link active" href="#">All</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#">Paid</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#">Waiting For Shipping</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#">Shipping</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#">Completed</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#">Cancelled</a>
                </li>
            </ul>
            <div class="text-center mt-4">
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th>Order</th>
                                <th>Created Date</th>
                                <th>Updated Date</th>
                                <th>Total Amount</th>
                                <th>Payment Method</th>
                                <th>Shipper</th>
                                <th>Status</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody id="orderTableBody">
                            <!-- Rows will be dynamically added here -->
                        </tbody>
                    </table>
                    @* <p>Place order and enjoy <span class="text-danger">Fast Shipping</span></p>
                    <button class="btn btn-warning">Start buying</button>
                    <button class="btn btn-outline-danger">View Your Cart</button> *@
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const urlParams = new URLSearchParams(window.location.search);
        const userId = urlParams.get('userId');
        loadOrder(userId);
    });

    const token = sessionStorage.getItem('token');
    const userId = getUserIdFromToken();

    async function loadOrder(userId) {
        try {
            let response = await fetch(`http://localhost:5215/odata/Order/OrderHistory(${userId})`, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            if (!response.ok) {
                throw new Error('Failed to fetch orders');
            }

            let data = await response.json();
            console.log('API response:', data);
            const orders = data.value || data.$values || [];

            if (!Array.isArray(orders)) {
                throw new Error('Orders data is not an array');
            }

            const ordersList = document.getElementById('orderTableBody');
            let sequenceNumber = 1;

            for (const order of orders) {
                const createDate = new Date(order.createAt).toLocaleDateString('en-GB');
                const updateDate = new Date(order.updateAt).toLocaleDateString('en-GB');

                // Get status asynchronously and wait for it to resolve
                const statusNamePromise = getOrderStatus(order.orderStatusId);
                const statusName = await statusNamePromise;

                const tr = document.createElement('tr');
                tr.innerHTML = `
                    <td>${sequenceNumber}</td>
                    <td>${createDate}</td>
                    <td>${updateDate}</td>
                    <td>${order.totalAmount}</td>
                    <td>${order.paymentType}</td>
                    <td>${order.shipper}</td>
                    <td>${statusName}</td>
                    <td>${await getActionButtons(order)}</td>
                `;
                ordersList.appendChild(tr);
                sequenceNumber++;
            }
        } catch (error) {
            console.error('Error fetching orders:', error);
        }
    }


    async function getOrderStatus(orderStatusId) {
        try {
            const response = await fetch(`http://localhost:5215/odata/Order/OrderStatus?$filter=id eq ${orderStatusId}`, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            if (!response.ok) {
                throw new Error(`Failed to fetch status: ${response.status} - ${response.statusText}`);
            }

            const data = await response.json();
            console.log('API response:', data);

            // Assuming $values is an array of status objects, return the first item
            if (data.$values && data.$values.length > 0) {
                return data.$values[0].name;
            } else {
                throw new Error('Empty response or invalid data format');
            }
        } catch (error) {
            console.error('Error fetching status:', error);
            throw error; // Re-throw the error to be caught by the caller
        }
    }


    function getActionButtons(order) {
        const normalizedStatusId = order.orderStatusId;
        console.log(`Order ID: ${order.id}, Order Status ID: ${normalizedStatusId}`);

        switch (normalizedStatusId) {
            case 2: // Shipping
            case 1: // Paying
                console.log(`Order ID: ${order.id} - Adding cancel button`);
                return `
                    <a href="/Customer/OrderDetail?id=${order.id}" class="site-btn">View</a>
                    <button onclick="cancelOrder(${order.id})" class="site-btn mt-3">Cancel</button>
                `;
            default:
                console.log(`Order ID: ${order.id} - View only`);
                return `<a href="/Customer/OrderDetail?id=${order.id}" class="site-btn">View</a>`;
        }
    }


    async function cancelOrder(orderId) {
        if (!confirm('Are you sure you want to cancel this order?')) {
            return;
        }
        try {
            const response = await fetch(`http://localhost:5215/odata/User/cancel/${orderId}`, {
                method: 'PUT',
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
            if (response.ok) {
                window.location.href = `/Customer/OrderHistory?userId=${userId}`;
                console.log('Order canceled successfully');
                alert('Order canceled successfully');
            } else {
                console.error('Failed to cancel order');
                alert('Failed to cancel order');
            }
        } catch (error) {
            console.error('Error canceling order:', error);
        }
    }

    function getUserIdFromToken() {
        const token = sessionStorage.getItem('token');
        if (token) {
            const payload = JSON.parse(atob(token.split('.')[1]));
            return payload.nameid;
        }
        return null;
    }
</script>