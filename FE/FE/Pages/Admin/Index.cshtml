@page
@model FE.Pages.Admin.IndexModel
@{
}
<div class="container-fluid px-4">
    <h1 class="mt-4">Dashboard</h1>
    <ol class="breadcrumb mb-4">
        <li class="breadcrumb-item active">Dashboard</li>
    </ol>
    <div class="row">
        @* <div class="col-xl-3 col-md-6">
            <div class="card bg-primary text-white mb-4">
                <div class="card-body">Primary Card</div>
                <div class="card-footer d-flex align-items-center justify-content-between">
                    <a class="small text-white stretched-link" href="#">View Details</a>
                    <div class="small text-white"><i class="fas fa-angle-right"></i></div>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-md-6">
            <div class="card bg-warning text-white mb-4">
                <div class="card-body">Warning Card</div>
                <div class="card-footer d-flex align-items-center justify-content-between">
                    <a class="small text-white stretched-link" href="#">View Details</a>
                    <div class="small text-white"><i class="fas fa-angle-right"></i></div>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-md-6">
            <div class="card bg-success text-white mb-4">
                <div class="card-body">Success Card</div>
                <div class="card-footer d-flex align-items-center justify-content-between">
                    <a class="small text-white stretched-link" href="#">View Details</a>
                    <div class="small text-white"><i class="fas fa-angle-right"></i></div>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-md-6">
            <div class="card bg-danger text-white mb-4">
                <div class="card-body">Danger Card</div>
                <div class="card-footer d-flex align-items-center justify-content-between">
                    <a class="small text-white stretched-link" href="#">View Details</a>
                    <div class="small text-white"><i class="fas fa-angle-right"></i></div>
                </div>
            </div>
        </div>
    </div> *@
    <div class="row">
        <div class="col-xl-6">
            <div class="card mb-4">
                <div class="card-header">
                    <i class="fas fa-chart-area me-1"></i>
                    Total Money In Month
                </div>
                <div class="card-body"><canvas id="myAreaChart" width="100%" height="40"></canvas></div>
            </div>
        </div>
        <div class="col-xl-6">
            <div class="card mb-4">
                <div class="card-header">
                    <i class="fas fa-chart-bar me-1"></i>
                    Total Order In Month
                </div>
                <div class="card-body"><canvas id="myBarChart" width="100%" height="40"></canvas></div>
            </div>
        </div>
    </div>
    <div class="card mb-4">
        <div class="card-header">
            <i class="fas fa-table me-1"></i>
            Table of Orders and Revenue
        </div>
        <div class="card-body">
            <table id="datatablesSimple">
                <thead>
                    <tr>
                        <th>Month</th>
                        <th>Total Revenue</th>
                        <th>Total Orders</th>
                    </tr>
                </thead>
                <tbody>
                </tbody>
            </table>
        </div>
    </div>
</div>
@section Scripts {
    <script>
        const token = sessionStorage.getItem('token');

        document.addEventListener('DOMContentLoaded', async (event) => {
            const areaCtx = document.getElementById("myAreaChart");
            const barCtx = document.getElementById("myBarChart");

            function formatCurrency(amount) {
                return amount.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".") + " VNĐ";
            }

            try {
                let response = await fetch('http://localhost:5215/odata/Order', {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });

                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }

                let data = await response.json();
                const orders = data.$values;                    

                // Process data for the area chart (total amount per month)
                const monthlyAmounts = {};
                orders.forEach(order => {
                    const month = new Date(order.createAt).toLocaleString('en-CA', { month: 'long', year: 'numeric' });
                    if (!monthlyAmounts[month]) {
                        monthlyAmounts[month] = 0;
                    }
                    monthlyAmounts[month] += order.totalAmount;
                });

                

                // Prepare data for the area chart
                const monthlyLabels = Object.keys(monthlyAmounts);
                
                const monthlyAmountsData = Object.values(monthlyAmounts);

                // Create the area chart
                if (areaCtx) {
                    new Chart(areaCtx, {
                        type: 'line',
                        data: {
                            labels: monthlyLabels,
                            datasets: [{
                                label: "Total Amount",
                                lineTension: 0.3,
                                backgroundColor: "rgba(2,117,216,0.2)",
                                borderColor: "rgba(2,117,216,1)",
                                pointRadius: 5,
                                pointBackgroundColor: "rgba(2,117,216,1)",
                                pointBorderColor: "rgba(255,255,255,0.8)",
                                pointHoverRadius: 5,
                                pointHoverBackgroundColor: "rgba(2,117,216,1)",
                                pointHitRadius: 50,
                                pointBorderWidth: 2,
                                data: monthlyAmountsData,
                            }],
                        },
                        options: {
                            scales: {
                                xAxes: [{
                                    time: {
                                        unit: 'month'
                                    },
                                    gridLines: {
                                        display: false
                                    },
                                    ticks: {
                                        maxTicksLimit: 6
                                    }
                                }],
                                yAxes: [{
                                    ticks: {
                                        min: 0,
                                        max: Math.max(...monthlyAmountsData) * 1.2, // adjust the max value to be slightly higher than the max data point
                                        maxTicksLimit: 5
                                    },
                                    gridLines: {
                                        color: "rgba(0, 0, 0, .125)",
                                    }
                                }],
                            },
                            legend: {
                                display: false
                            }
                        }
                    });
                }

                // Process data for the bar chart (number of orders per month)
                const monthlyOrders = {};
                orders.forEach(order => {
                    const month = new Date(order.createAt).toLocaleString('en-CA', { month: 'long', year: 'numeric' });
                    if (!monthlyOrders[month]) {
                        monthlyOrders[month] = 0;
                    }
                    monthlyOrders[month]++;
                });

                // Prepare data for the bar chart
                const monthlyOrderLabels = Object.keys(monthlyOrders);
                const monthlyOrdersData = Object.values(monthlyOrders);

                // Create the bar chart
                if (barCtx) {
                    new Chart(barCtx, {
                        type: 'bar',
                        data: {
                            labels: monthlyOrderLabels,
                            datasets: [{
                                label: "Number of Orders",
                                backgroundColor: "rgba(2,117,216,1)",
                                borderColor: "rgba(2,117,216,1)",
                                data: monthlyOrdersData,
                            }],
                        },
                        options: {
                            scales: {
                                xAxes: [{
                                    time: {
                                        unit: 'month'
                                    },
                                    gridLines: {
                                        display: false
                                    },
                                    ticks: {
                                        maxTicksLimit: 6
                                    }
                                }],
                                yAxes: [{
                                    ticks: {
                                        min: 0,
                                        max: Math.max(...monthlyOrdersData) * 1.2, // adjust the max value to be slightly higher than the max data point
                                        maxTicksLimit: 5
                                    },
                                    gridLines: {
                                        display: true
                                    }
                                }],
                            },
                            legend: {
                                display: false
                            }
                        }
                    });
                }


                    //Revenue
                    let responseRevenue = await fetch('http://localhost:5215/odata/Revenue', {
                        headers: {
                            'Authorization': `Bearer ${token}`
                        }
                    });
                    if (!responseRevenue.ok) {
                        throw new Error('Network response was not ok');
                    }
                    let dataOrder = await responseRevenue.json();
                    const ordersRevenue = dataOrder.$values;

                    //Batch


                    let responseBatch = await fetch('http://localhost:5215/odata/Batches', {
                        headers: {
                            'Authorization': `Bearer ${token}`
                        }
                    });
                    if (!responseBatch.ok) {
                        throw new Error('Network response was not ok');
                    }
                    let dataBatch = await responseBatch.json();
                    const batches = dataBatch.$values;

                //Revenue
                    const monthlyProfits = {};
                    const monthlyAmountsRevenue = {};
                    ordersRevenue.forEach(order => {
                        const month = new Date(order.createAt).toLocaleString('en-CA', { month: 'long', year: 'numeric' });
                        if (!monthlyAmountsRevenue[month]) {
                            monthlyAmountsRevenue[month] = 0;
                        }
                        monthlyAmountsRevenue[month] += order.totalAmount;
                    });

                    const monthlyOrdersRevenue = {};
                    ordersRevenue.forEach(order => {
                        const month = new Date(order.createAt).toLocaleString('en-CA', { month: 'long', year: 'numeric' });
                        if (!monthlyOrdersRevenue[month]) {
                            monthlyOrdersRevenue[month] = 0;
                        }
                        monthlyOrdersRevenue[month]++;
                    });

                    const monthlyLabelsForRevenue = Object.keys(monthlyAmountsRevenue);

                    const milkPriceMap = {};
                    batches.forEach(batch => {
                        if (!milkPriceMap[batch.milkId]) {
                            milkPriceMap[batch.milkId] = batch.importedPrice;
                        }
                    });

                    ordersRevenue.forEach(order => {
                        const month = new Date(order.createAt).toLocaleString('en-CA', { month: 'long', year: 'numeric' });
                        if (ordersRevenue == null && ordersRevenue["$values"] == null) { console.log("Null Revenue")}
                        if (!monthlyProfits[month]) {
                            monthlyProfits[month] = 0; // Khởi tạo giá trị profit ban đầu
                        }

                        order.orderDetails["$values"].forEach(detail => {
                            const batch = batches.find(b => b.milkId === detail.milkId);
                            if (batch) {
                                const profitPerProduct = (detail.price - batch.importedPrice) * detail.quantity;
                                console.log(`Profit for Milk ID: ${detail.milkId} is ${profitPerProduct}`);
                                monthlyProfits[month] += profitPerProduct;
                            }
                        });
                    });

                    console.log("Monthly Profits: ", monthlyProfits);

                    console.log("Monthly Amounts Revenue: ", monthlyAmountsRevenue);
                    console.log("Monthly Orders Revenue: ", monthlyOrdersRevenue);
                    console.log("Monthly Profits: ", monthlyProfits);


                    const tableBody = document.querySelector('#datatablesSimple tbody');
                    monthlyLabelsForRevenue.forEach(month => {
                        const row = document.createElement('tr');
                        const cellMonth = document.createElement('td');
                        const cellTotalRevenue = document.createElement('td');
                        const cellTotalOrders = document.createElement('td');

                        cellMonth.textContent = month;
                        cellTotalRevenue.textContent = monthlyProfits[month] ? formatCurrency(monthlyProfits[month]) : '0.00 VNĐ';
                        cellTotalOrders.textContent = monthlyOrdersRevenue[month];

                        row.appendChild(cellMonth);
                        row.appendChild(cellTotalRevenue);
                        row.appendChild(cellTotalOrders);

                        tableBody.appendChild(row);
                    });

                    // Initialize DataTable
                    $(document).ready(function () {
                        $('#datatablesSimple').DataTable();
                    });
            } catch (error) {
                console.error('Error fetching the data:', error);
            }
        });
    </script>
}